
package cop5556sp17;

import static org.junit.Assert.assertEquals;

//import java.io.BufferedReader;
//import java.io.FileNotFoundException;
import java.io.FileOutputStream;
//import java.io.FileReader;
//import java.io.IOException;
import java.io.OutputStream;

import org.junit.After;
import org.junit.Before;
//import org.junit.Rule;
import org.junit.Test;
//import org.junit.rules.ExpectedException;

import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;

public class CodeGenVisitorTest_Grading {

	@Before
	public void initLog(){
	if (devel || grade) PLPRuntimeLog.initLog();
	}

	@After
	public void printLog(){
	System.out.println(PLPRuntimeLog.getString());
	}
	
	static final boolean doPrint = true;
	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	boolean devel = false;
	boolean grade = true;

	@Test
	public void subImage() throws Exception {
		String input = "subImage url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		//directly execute bytecode
		String[] args = new String[1];
		args[0] = "https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "getURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)subcopyImagecreateOrSetFrameshowImage";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
		
	@Test
	public void exprComp() throws Exception {
		String input = "exprComp { integer a a<-2; integer b b<-3; a <- b - a * (2 / 2 -6) +5%2 + 5/2;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		//directly execute bytecode
		String[] args = new String[0];
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "2316";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}

	@Test
	public void readFromURLandWriteToFile2() throws Exception {
		String input = "readFromURLandWriteToFile2 url u, \nfile out \n{image i frame f \nu -> gray  -> i;\n i -> f -> show; \n i -> out;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[2];
		args[0] = "https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg";
		args[1] = "Images/output_readFromURLandWriteToFile2.jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "getURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)grayOpcreateOrSetFrameshowImagewrite(Images\\output_readFromURLandWriteToFile2.jpg)";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}

	@Test
	public void readFromURLandWriteToFile3() throws Exception {
		String input = "readFromURLandWriteToFile3 url u, \nfile out \n{\nu -> gray -> out;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[2];
		args[0] = "https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg";
		args[1] = "Images/output_readFromURLandWriteToFile3.jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "getURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)grayOpwrite(Images\\output_readFromURLandWriteToFile3.jpg)";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}

	@Test
	public void sleepImg() throws Exception {
		String input = "sleepImg url u {image i frame f \nu -> i -> convolve -> f -> show;sleep 5;integer j j <- 42;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[1];
		args[0] = "https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "getURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)convolvecreateOrSetFrameshowImage42";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}

	@Test
	public void fibonacci() throws Exception {
		String input = "fibonacci integer n {\n integer result result<-0;\n if(n == 0){\n result<- 0;\n }\n if(n == 1){\n result<- 1;\n }\n if(n > 1){\n integer fib1 fib1<- 0;\n integer fib2 fib2<- 1;\n integer idx idx<- 2;\n while(idx < n){ integer tmp tmp<- fib1 + fib2;\n fib1<- fib2;\n fib2<- tmp;\n idx<- idx + 1;\n }\n result<- fib1+fib2;\n }\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[1];
		args[0] = "7";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "00121113212432355356858713";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void addImage() throws Exception {
		String input = "addImage url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show; sleep 5; k <- k + i; k -> f -> show; \n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[1];
		args[0] = "https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "getURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)subcopyImagecreateOrSetFrameshowImageaddcopyImagecreateOrSetFrameshowImageshowImage";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}

	@Test
	public void booleanComp1() throws Exception {
		String input = "booleanComp1 { boolean x x<- true == false;boolean y y<- true != false;boolean z z<- true | false;z<- x|y;z<- x&y;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[0];
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "falsetruetruetruefalse";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void booleanComp2() throws Exception {
		String input = "booleanComp2 { boolean x x<- true;boolean y y<- false;boolean z z<- true < false;integer a a<- 4;integer b b<- 6;z<- ((a<b) | x) & y;z<- (a<b) | (x & y);}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[0];
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "truefalsefalse46falsetrue";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void convolveImg() throws Exception {
		String input = "convolveImg url u {image i frame f \nu -> i -> convolve -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[1];
		args[0] = "https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "getURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)convolvecreateOrSetFrameshowImage";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void readFromURLandDisplay() throws Exception {
		String input = "readFromURLandDisplay url u {image i frame f \nu -> i;i -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[1];
		args[0] = "https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "getURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)createOrSetFrameshowImage";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void imgMove2() throws Exception {
		String input = "imgMove2 url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5; \ninteger x \ninteger y \nx <- screenwidth;\ny <- screenheight; \nf -> move (x*3/4,y/4) -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[1];
		args[0] = "https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "getURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)createOrSetFrameshowImagegetScreenWidth1920getScreenHeight1080moveFrameshowImage";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void subImage2() throws Exception {
		String input = "subImage2 url u {image i image j frame f \nu -> i; \nu -> j; \n i <- i-j; i -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[1];
		args[0] = "https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "getURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)subcopyImagecreateOrSetFrameshowImage";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void booleanBinaryExpression2() throws Exception {
		String input = "booleanBinaryExpression2 \nboolean b0, boolean b1{ \n boolean b3 boolean b4 b3 <- b0 & b1; b4 <- b0 | b1;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[2];
		args[0] = "false";
		args[1] = "true";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "falsetrue";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void booleanBinaryExpression3() throws Exception {
		String input = "booleanBinaryExpression3 \nboolean b0, boolean b1{ \n boolean b3 boolean b4 b3 <- b0 & b1; b4 <- b0 | b1;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[2];
		args[0] = "true";
		args[1] = "false";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "falsetrue";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void modImage() throws Exception {
		String input = "modImage url u {image i image j frame f \nu -> j; \n i <- j%128; i -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[1];
		args[0] = "https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "getURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)modcopyImagecreateOrSetFrameshowImage";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void allTheOps() throws Exception {
		String input = "allTheOps file u {image i frame f \nu -> i -> gray -> convolve -> blur -> i -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[1];
		args[0] = "Images/image1.jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "readFromFile(Images\\image1.jpg)grayOpconvolveblurOpcreateOrSetFrameshowImage";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void readFromURLandDisplayDisplay2() throws Exception {
		String input = "readFromURLandDisplayDisplay2 url u {image i frame f \nu -> i -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[1];
		args[0] = "https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "getURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)createOrSetFrameshowImage";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void readFromURLandWriteToFile() throws Exception {
		String input = "readFromURLandWriteToFile url u, \nfile out \n{image i frame f \nu -> i;i -> f -> show; \n i -> out;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[2];
		args[0] = "https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg";
		args[1] = "Images/output_readFromURLandWriteToFile.jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "getURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)createOrSetFrameshowImagewrite(Images\\output_readFromURLandWriteToFile.jpg)";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void blurImg() throws Exception {
		String input = "blurImg url u {image i frame f \nu -> i -> blur -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[1];
		args[0] = "https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "getURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)blurOpcreateOrSetFrameshowImage";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void mod() throws Exception {
		String input = "mod {integer x\n integer y\n integer z\n x <-33; \ny <- 3; \nz <- x%y;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[0];
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "3330";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void minus() throws Exception {
		String input = "minus {integer x\n integer y\n integer z\n x <-33; \ny <- 3; \nz <- x-y;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[0];
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "33330";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void grayImg() throws Exception {
		String input = "grayImg url u {image i frame f \nu -> i -> gray -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[1];
		args[0] = "https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "getURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)grayOpcreateOrSetFrameshowImage";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void divImage() throws Exception {
		String input = "divImage url u {image i image j frame f \nu -> j; \n i <- j/2; i -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[1];
		args[0] = "https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "getURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)divcopyImagecreateOrSetFrameshowImage";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void readFromURLandWriteScaledImageToFile() throws Exception {
		String input = "readFromURLandWriteScaledImageToFile url u, \nfile out \n{image i frame f \nu -> scale (3) -> i;i -> f -> show; \n i -> out;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[2];
		args[0] = "https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg";
		args[1] = "Images/output_readFromURLandWriteScaledImageToFile.jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "getURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)scalecreateOrSetFrameshowImagewrite(Images\\output_readFromURLandWriteScaledImageToFile.jpg)";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void readFromFile() throws Exception {
		String input = "readFromFile file u {image i frame f \nu -> i;i -> f -> show; \n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[1];
		args[0] = "Images/image1.jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "readFromFile(Images\\image1.jpg)createOrSetFrameshowImage";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void barArrowGray() throws Exception {
		String input = "barArrowGray url u {image i frame f \nu -> i |-> gray -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[1];
		args[0] = "https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "getURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)grayOpcreateOrSetFrameshowImage";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}

	@Test
	public void assignImage() throws Exception {
		String input = "assignImage url u {image i image j frame f \nu -> i; j <- i;j -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[1];
		args[0] = "https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "getURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)copyImagecreateOrSetFrameshowImage";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void scaleImage() throws Exception {
		String input = "scaleImage url u {image i frame f \nu -> i -> f -> show; frame f2 \ni -> scale (3) -> f2 -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[1];
		args[0] = "https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "getURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)createOrSetFrameshowImagescalecreateOrSetFrameshowImage";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void imgMove() throws Exception {
		String input = "imgMove url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5; \ninteger x \ninteger y \nf -> xloc -> x; \nf -> yloc -> y; \nf -> move (x+100,y-100) -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[1];
		args[0] = "https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "getURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)createOrSetFrameshowImagegetXgetYmoveFrameshowImage";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void assignImageAndFrame() throws Exception {
		String input = "assignImageAndFrame url u {image i image i1 frame f frame f1\nu -> i -> f -> show; frame f2 \ni -> scale (3) -> f2 -> show; \n i1 <- i; \n f2 <- f;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[1];
		args[0] = "https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "getURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)readFromURL(https://s3.amazonaws.com/glocal-files/image/bi+(100).jpg)createOrSetFrameshowImagescalecreateOrSetFrameshowImagecopyImage";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
	
	@Test
	public void booleanBinaryExpression() throws Exception {
		String input = "booleanBinaryExpression \nboolean b0, boolean b1{ \n boolean b3 boolean b4 b3 <- b0 & b1; b4 <- b0 | b1;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		//System.out.println("Wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[2];
		args[0] = "true";
		args[1] = "false";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String expectedLog = "falsetrue";
		String actualLog = PLPRuntimeLog.getString();
		assertEquals(expectedLog, actualLog);
	}
		
}
