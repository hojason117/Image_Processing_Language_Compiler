package cop5556sp17;

import java.io.FileOutputStream;
import java.io.OutputStream;
import org.junit.Rule;
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import org.junit.rules.ExpectedException;
import static org.junit.Assert.assertEquals;

import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;

public class CodeGenVisitorTest {

	static final boolean doPrint = true;
	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}
	
	boolean devel = true;
	//boolean devel = false;
	//boolean grade = true;
	boolean grade = false;
	
	@Before
	public void initLog(){
		if (devel || grade) PLPRuntimeLog.initLog();
	}
	@After
	public void printLog(){
		System.out.println(PLPRuntimeLog.getString());
	}

	@Test
	public void emptyProg() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + "  {}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}

	@Test
	public void test_1() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " integer j, boolean b {}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"5", "true"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_2() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " integer j, boolean b {integer x boolean y frame z}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"5", "true"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_3() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " integer j, boolean b {integer x boolean y frame z}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"5", "true"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_4() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " integer j {integer x x <- j; j <- x;}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"5"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_5() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " boolean a, boolean b {boolean c boolean d c <- a; d <- b; a <- c;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"true", "false"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_6() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " boolean a, boolean b {a <- false;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"true", "false"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_7() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " boolean a, boolean b {boolean c boolean d c <- a; a <- c; d <- b; b <- d;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"true", "false"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_8() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " integer j, boolean b {integer x while(b) {x <- j;}}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"5", "false"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_9() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " integer j, boolean b {integer x if(b) {x <- j;}}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"5", "true"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_10() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " integer j {while(j != 0) {j <- j-1;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"5"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	// correct output: falsetruefalsetruefalsetruetrue
	public void test_11() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " boolean a, boolean b {boolean t t <- a == b; t <- a != b; t <- a < b; t <- a > b; t <- a <= b; t <- a >= b; t <- b < a;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"true", "false"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_12() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " url u, url t {t <- u;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"https://www.google.com", "https://www.yahoo.com"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getURL(https://www.google.com)getURL(https://www.yahoo.com)";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_14() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " integer a {a <- screenwidth; b <- screenheight; integer b}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"5"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getScreenWidthgetScreenHeight";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_15() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " integer t {sleep t;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"1000"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_16() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " {frame a frame b a <- b;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_19() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " url u {image a u -> a;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "readFromURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_20() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " {integer a integer b a <- 1; b <- a;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_22() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " url u {image a u -> a; a -> width; a -> height;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "readFromURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_24() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " url u {image a u -> a; a -> scale(2) -> width -> i; integer i}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "readFromURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)scale";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_25() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " url u, integer i {image a u -> a -> scale(2) -> a; a -> height -> i; integer j j <- i;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg", "0"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "readFromURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)scale";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_26() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " url u, integer i {image a frame b u -> a -> b -> xloc -> i; b -> yloc -> i;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg", "0"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "readFromURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)createOrSetFramegetXgetY";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_27() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " url u {image a frame b u -> a -> b -> show; sleep 1000; b -> hide; sleep 1000;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "readFromURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)createOrSetFrameshowImagehideImage";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_28() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " url u {image a frame b u -> a -> b -> show; sleep 1000; b -> move(100, 100); sleep 1000; a -> scale(2) -> a; frame c a -> c -> show; sleep 1000;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "readFromURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)createOrSetFrameshowImagemoveFramescalecreateOrSetFrameshowImage";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_31() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " url u {image a frame b u -> a -> b -> move(300, 300) -> show; sleep 1000; a |-> blur; frame c a -> c -> move(900, 300) -> show; sleep 2000;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "readFromURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)createOrSetFramemoveFrameshowImageblurOpcreateOrSetFramemoveFrameshowImage";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_32() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " url u {image a frame b u -> a -> b -> move(300, 300) -> show; sleep 1000; a |-> convolve; frame c a -> c -> move(900, 300) -> show; sleep 2000;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "readFromURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)createOrSetFramemoveFrameshowImageconvolvecreateOrSetFramemoveFrameshowImage";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_33() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " url u {image a frame b u -> a -> b -> move(300, 300) -> show; sleep 1000; a |-> gray; frame c a -> c -> move(900, 300) -> show; sleep 2000;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "readFromURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)createOrSetFramemoveFrameshowImagegrayOpcreateOrSetFramemoveFrameshowImage";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
		public void test_34() throws Exception {
			//scan, parse, and type check the program
			String progname = "Prog";
			String input = progname + " {integer i i <- (77 % 13); i <- (50 + 23); i <- (50 - 23); i <- (13 * 5); i <- (77 / 10);}";
			Scanner scanner = new Scanner(input);
			scanner.scan();
			Parser parser = new Parser(scanner);
			ASTNode program = parser.parse();
			TypeCheckVisitor v = new TypeCheckVisitor();
			program.visit(v, null);
			show(program);
			
			//generate code
			CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
			byte[] bytecode = (byte[]) program.visit(cv, null);
			
			//output the generated bytecode
			CodeGenUtils.dumpBytecode(bytecode);
			
			//write byte code to file 
			String name = ((Program) program).getName();
			String classFileName = "bin/" + name + ".class";
			OutputStream output = new FileOutputStream(classFileName);
			output.write(bytecode);
			output.close();
			System.out.println("wrote classfile to " + classFileName);
			
			// directly execute bytecode
			String[] args = new String[0]; //create command line argument array to initialize params
			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
			instance.run();
			
			String correctOutput = "";
			String testCaseOutput = PLPRuntimeLog.getString();
			assertEquals(correctOutput, testCaseOutput);
		}
	
	@Test
	public void test_35() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " {boolean a boolean b a <- true; b <- false; boolean c c <- a | b; c <- a & b;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_36() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " url u1, url u2 {image a image b u1 -> a; u2 -> b; image c c <- a + b; frame d c -> d -> show; sleep 2000;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg", 
				"http://www.bestmintonhk.com/forum/data/attachment/forum/201408/04/123550mn4hnamdlqq8qhnd.jpg"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "getURL(http://www.bestmintonhk.com/forum/data/attachment/forum/201408/04/123550mn4hnamdlqq8qhnd.jpg)"
				+ "readFromURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "readFromURL(http://www.bestmintonhk.com/forum/data/attachment/forum/201408/04/123550mn4hnamdlqq8qhnd.jpg)"
				+ "addcopyImagecreateOrSetFrameshowImage";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_37() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " url u1, url u2 {image a image b u1 -> a; u2 -> b; image c c <- a - b; frame d c -> d -> show; sleep 2000;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg", 
				"http://www.bestmintonhk.com/forum/data/attachment/forum/201408/04/123550mn4hnamdlqq8qhnd.jpg"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "getURL(http://www.bestmintonhk.com/forum/data/attachment/forum/201408/04/123550mn4hnamdlqq8qhnd.jpg)"
				+ "readFromURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "readFromURL(http://www.bestmintonhk.com/forum/data/attachment/forum/201408/04/123550mn4hnamdlqq8qhnd.jpg)"
				+ "subcopyImagecreateOrSetFrameshowImage";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_38() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " url u {image a image b u -> a; b <- a * 3; frame c b -> c -> show; sleep 2000;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "readFromURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "mulcopyImagecreateOrSetFrameshowImage";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_39() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " url u {image a image b u -> a; b <- a / 3; frame c b -> c -> show; sleep 2000;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "readFromURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "divcopyImagecreateOrSetFrameshowImage";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_40() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " url u {image a image b u -> a; b <- a % 128; frame c b -> c -> show; sleep 2000;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "readFromURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "modcopyImagecreateOrSetFrameshowImage";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_41() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " url u1, url u2 {u1 <- u2; image a u1 -> a -> d -> show; sleep 2000; frame d}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg", 
				"http://www.bestmintonhk.com/forum/data/attachment/forum/201408/04/123550mn4hnamdlqq8qhnd.jpg"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "getURL(http://www.bestmintonhk.com/forum/data/attachment/forum/201408/04/123550mn4hnamdlqq8qhnd.jpg)"
				+ "readFromURL(http://www.bestmintonhk.com/forum/data/attachment/forum/201408/04/123550mn4hnamdlqq8qhnd.jpg)"
				+ "createOrSetFrameshowImage";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_42() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " url u1, url u2 {image a image b u1 -> a -> c -> show; u2 -> b -> d; c <- d; sleep 500; c -> hide -> show; sleep 1000; frame c frame d}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg", 
				"http://www.bestmintonhk.com/forum/data/attachment/forum/201408/04/123550mn4hnamdlqq8qhnd.jpg"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "getURL(http://www.bestmintonhk.com/forum/data/attachment/forum/201408/04/123550mn4hnamdlqq8qhnd.jpg)"
				+ "readFromURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)createOrSetFrameshowImage"
				+ "readFromURL(http://www.bestmintonhk.com/forum/data/attachment/forum/201408/04/123550mn4hnamdlqq8qhnd.jpg)"
				+ "createOrSetFramehideImageshowImage";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_44() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " url u {image a frame b u -> blur -> a -> b -> show; sleep 2000;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "readFromURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)blurOpcreateOrSetFrameshowImage";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_45() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " url u {image a image b u -> a; u -> b; boolean c c <- a == b; c <- a != b; a <- b; c <- a == b;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "readFromURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "readFromURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)copyImage";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
	
	@Test
	public void test_46() throws Exception {
		//scan, parse, and type check the program
		String progname = "Prog";
		String input = progname + " url a, url b {boolean c c <- a == b; c <- a != b; a <- b; c <- a != b;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg", 
				"http://www.bestmintonhk.com/forum/data/attachment/forum/201408/04/123550mn4hnamdlqq8qhnd.jpg"}; //create command line argument array to initialize params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
		String correctOutput = "getURL(http://www.smash-net.tv/sys_img/photo/2015/4032/4032.jpg)"
				+ "getURL(http://www.bestmintonhk.com/forum/data/attachment/forum/201408/04/123550mn4hnamdlqq8qhnd.jpg)";
		String testCaseOutput = PLPRuntimeLog.getString();
		assertEquals(correctOutput, testCaseOutput);
	}
}